{
	"name": "UnionAllEmployees",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CEO",
						"type": "DatasetReference"
					},
					"name": "CEO"
				},
				{
					"dataset": {
						"referenceName": "Manager",
						"type": "DatasetReference"
					},
					"name": "Manager"
				},
				{
					"dataset": {
						"referenceName": "Developer",
						"type": "DatasetReference"
					},
					"name": "Developer"
				},
				{
					"dataset": {
						"referenceName": "Lead",
						"type": "DatasetReference"
					},
					"name": "Lead"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "UniqueAllEmployee",
						"type": "DatasetReference"
					},
					"name": "UnionAllEmployee"
				}
			],
			"transformations": [
				{
					"name": "AllEmployee"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as string,",
				"          { Name} as string,",
				"          Designation as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CEO",
				"source(output(",
				"          ID as string,",
				"          { Name} as string,",
				"          Designation as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Manager",
				"source(output(",
				"          ID as string,",
				"          { Name} as string,",
				"          Designation as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Developer",
				"source(output(",
				"          ID as string,",
				"          { Name} as string,",
				"          Designation as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Lead",
				"CEO, Manager, Lead, Developer union(byName: true)~> AllEmployee",
				"AllEmployee sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['AllEmployee.txt'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ID,",
				"          { Name},",
				"          Designation",
				"     ),",
				"     partitionBy('hash', 1)) ~> UnionAllEmployee"
			]
		}
	}
}