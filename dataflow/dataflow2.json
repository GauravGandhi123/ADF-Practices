{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "employee",
						"type": "DatasetReference"
					},
					"name": "employee"
				},
				{
					"dataset": {
						"referenceName": "Designation",
						"type": "DatasetReference"
					},
					"name": "Designation"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "output",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "output",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "output",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "output",
						"type": "DatasetReference"
					},
					"name": "sink4"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as string,",
				"          { Name} as string,",
				"          { DesignationID} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> employee",
				"source(output(",
				"          ID as string,",
				"          Designation as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Designation",
				"employee, Designation join({ DesignationID} == Designation@ID,",
				"     joinType:'left',",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> join1",
				"join1 split(equals(Designation,'CEO'),",
				"     equals(Designation,'Manager'),",
				"     equals(Designation,'Lead'),",
				"     equals(Designation,'Developer'),",
				"     disjoint: false) ~> split1@(CEO, Manager, Lead, Developer, Other)",
				"split1@CEO sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['CEO.txt'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ID = split1@CEO@ID,",
				"          { Name},",
				"          Designation",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1",
				"split1@Lead sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Lead.txt'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ID = split1@Lead@ID,",
				"          { Name},",
				"          Designation",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink2",
				"split1@Manager sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Manager.txt'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ID = split1@Manager@ID,",
				"          { Name},",
				"          Designation",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink3",
				"split1@Developer sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Developer.txt'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ID = split1@Developer@ID,",
				"          { Name},",
				"          Designation",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink4"
			]
		}
	}
}