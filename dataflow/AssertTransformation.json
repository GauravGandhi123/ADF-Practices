{
	"name": "AssertTransformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "EmployeeData",
						"type": "DatasetReference"
					},
					"name": "Employee"
				},
				{
					"dataset": {
						"referenceName": "Designation",
						"type": "DatasetReference"
					},
					"name": "Designation"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "output",
						"type": "DatasetReference"
					},
					"name": "Destination"
				}
			],
			"transformations": [
				{
					"name": "AssertChecks"
				},
				{
					"name": "CheckErrorRows"
				},
				{
					"name": "FilteringGoodRows"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          { Name} as string,",
				"          { DesignationID} as integer,",
				"          DOJ as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Employee",
				"source(output(",
				"          ID as integer,",
				"          Designation as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Designation",
				"Employee, Designation assert(expectTrue(!isNull(toDate(DOJ, 'yyyyMMdd')), false, 'DOJ', null, 'It will check the DOJ column'),",
				"     expectUnique(Employee@ID, false, 'Unique ID Check', null, 'It is checking unique id for all employees'),",
				"     expectExists(Designation@ID == { DesignationID}, false, 'Desination ID Check', null, 'It will check the Designation ID present or not same as Employee ID')) ~> AssertChecks",
				"AssertChecks derive(IsErrorRow = isError()) ~> CheckErrorRows",
				"CheckErrorRows filter(IsErrorRow == false()) ~> FilteringGoodRows",
				"FilteringGoodRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['GoodRecords.txt'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Destination"
			]
		}
	}
}