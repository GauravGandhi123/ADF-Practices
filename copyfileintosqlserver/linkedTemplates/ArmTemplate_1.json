{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "copyfileintosqlserver"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/UnionAllEmployees')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CEO",
								"type": "DatasetReference"
							},
							"name": "CEO"
						},
						{
							"dataset": {
								"referenceName": "Manager",
								"type": "DatasetReference"
							},
							"name": "Manager"
						},
						{
							"dataset": {
								"referenceName": "Developer",
								"type": "DatasetReference"
							},
							"name": "Developer"
						},
						{
							"dataset": {
								"referenceName": "Lead",
								"type": "DatasetReference"
							},
							"name": "Lead"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "UniqueAllEmployee",
								"type": "DatasetReference"
							},
							"name": "UnionAllEmployee"
						}
					],
					"transformations": [
						{
							"name": "AllEmployee"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as string,",
						"          { Name} as string,",
						"          Designation as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CEO",
						"source(output(",
						"          ID as string,",
						"          { Name} as string,",
						"          Designation as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Manager",
						"source(output(",
						"          ID as string,",
						"          { Name} as string,",
						"          Designation as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Developer",
						"source(output(",
						"          ID as string,",
						"          { Name} as string,",
						"          Designation as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Lead",
						"CEO, Manager, Lead, Developer union(byName: true)~> AllEmployee",
						"AllEmployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['AllEmployee.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ID,",
						"          { Name},",
						"          Designation",
						"     ),",
						"     partitionBy('hash', 1)) ~> UnionAllEmployee"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MaleSource",
								"type": "DatasetReference"
							},
							"name": "MaleSource"
						},
						{
							"dataset": {
								"referenceName": "FemaleSource",
								"type": "DatasetReference"
							},
							"name": "FemaleSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Relationship",
								"type": "DatasetReference"
							},
							"name": "Sink"
						}
					],
					"transformations": [
						{
							"name": "Join"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as string,",
						"          { Name} as string,",
						"          { SpouseID} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MaleSource",
						"source(output(",
						"          ID as string,",
						"          { Name} as string,",
						"          { SpouseID} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FemaleSource",
						"MaleSource, FemaleSource join(MaleSource@{ SpouseID} == FemaleSource@{ SpouseID},",
						"     joinType:'inner',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> Join",
						"Join filter(equals(MaleSource@{ Name},'Gaurav'),",
						"     partitionBy('hash', 1)) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as string,",
						"          { Name} as string,",
						"          { SpouseName} as string",
						"     ),",
						"     partitionFileNames:['Relationship.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ID = MaleSource@ID,",
						"          { Name} = MaleSource@{ Name},",
						"          { SpouseName} = FemaleSource@{ Name}",
						"     ),",
						"     partitionBy('hash', 1)) ~> Sink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee",
								"type": "DatasetReference"
							},
							"name": "employee"
						},
						{
							"dataset": {
								"referenceName": "Designation",
								"type": "DatasetReference"
							},
							"name": "Designation"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as string,",
						"          { Name} as string,",
						"          { DesignationID} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"source(output(",
						"          ID as string,",
						"          Designation as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Designation",
						"employee, Designation join({ DesignationID} == Designation@ID,",
						"     joinType:'left',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> join1",
						"join1 split(equals(Designation,'CEO'),",
						"     equals(Designation,'Manager'),",
						"     equals(Designation,'Lead'),",
						"     equals(Designation,'Developer'),",
						"     disjoint: false) ~> split1@(CEO, Manager, Lead, Developer, Other)",
						"split1@CEO sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['CEO.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ID = split1@CEO@ID,",
						"          { Name},",
						"          Designation",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1",
						"split1@Lead sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Lead.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ID = split1@Lead@ID,",
						"          { Name},",
						"          Designation",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink2",
						"split1@Manager sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Manager.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ID = split1@Manager@ID,",
						"          { Name},",
						"          Designation",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink3",
						"split1@Developer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Developer.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ID = split1@Developer@ID,",
						"          { Name},",
						"          Designation",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink4"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AssertTransformationPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AssertTransformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employee": {},
									"Designation": {},
									"Destination": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlow_Concept')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Relationship",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MaleSource": {},
									"FemaleSource": {},
									"Sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnionTransformation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "UnionAllEmployees",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CEO": {},
									"Manager": {},
									"Developer": {},
									"Lead": {},
									"UnionAllEmployee": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/UnionAllEmployees')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/conditional split transformation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"Designation": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]"
			]
		}
	]
}